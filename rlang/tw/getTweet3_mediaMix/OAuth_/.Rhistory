install.packages("tidyverse")
library(tidyverse)
libcurlVersion()
library(MASS)
??parallelCoordinates
install.packages("RMeCab")
sudo apt-get install r-base
sessionInfo()
sessionInfo()
a %<-% { 1 }
f <- futureOf(a)
library(future)
install.packages("future")
library(future)
a %<-% { 1 }
f <- futureOf(a)
print(f)
b %<-% { 2 }
f <- futureOf(b)
f
print(f)
## All futures
fs <- futureOf()
print(fs)
## Futures part of environment
env <- new.env()
env$c %<-% { 3 }
f <- futureOf(env$c)
print(f)
f2 <- futureOf(c, envir = env)
print(f2)
f3 <- futureOf("c", envir = env)
print(f3)
fs <- futureOf(envir = env)
print(fs)
a <- b <- c <- NA_real_
# An sequential future
plan(sequential)
f <- future({
a <- 7
b <- 3
c <- 2
a * b * c
})
y <- value(f)
print(y)
str(list(a = a, b = b, c = c)) ## All NAs
# create the manager
h <- taskCallbackManager()
# add a callback
h$add(function(expr, value, ok, visible) {
cat("In handler\n")
return(TRUE)
}, name = "simpleHandler")
# look at the internal callbacks.
getTaskCallbackNames()
# look at the R-level callbacks
names(h$callbacks())
getTaskCallbackNames()
removeTaskCallback("R-taskCallbackManager")
install.packages("frequencies")
###データ例の作成#####
n <- 15
TestData <- data.frame(Group = sample(paste0("Group", 1:5), n, replace = TRUE),
Data1 = sample(LETTERS[1:5], n, replace = TRUE),
Data2 = sample(LETTERS[1:26], n, replace = TRUE))
#######
#2変数内の出現数を表示:freq_two_vectsコマンド
#主となる変数を指定:col1オプション
#対象の変数を指定:col2オプション
#結果をdata.frameで出力:separate_tablesオプション
ResultData <- freq_two_vects(df = TestData, col1 = Data1, col2 = Data2,
separate_tables = FALSE)
#確認
ResultData
# A tibble: 55 x 4
Data1  Data2 Count Percentage
<fctr> <fctr> <int>      <dbl>
1      A      A     1         50
2      A      N     1         50
3      A      B     0          0
4      A      F     0          0
5      A      H     0          0
6      A      Q     0          0
7      A      R     0          0
8      A      W     0          0
9      A      X     0          0
10      A      Y     0          0
# ... with 45 more rows
#出現数が１以上を抽出
subset(ResultData, ResultData[, 3] > 0)
# A tibble: 14 x 4
Data1  Data2 Count Percentage
<fctr> <fctr> <int>      <dbl>
1      A      A     1       50.0
2      A      N     1       50.0
3      B      A     1       16.7
4      B      B     1       16.7
5      B      Q     1       16.7
6      B      R     1       16.7
7      B      W     1       16.7
8      B      X     1       16.7
9      C      H     2       50.0
10      C      F     1       25.0
11      C      Z     1       25.0
12      D      Y     1      100.0
13      E      R     1       50.0
14      E      Z     1       50.0
#1変数内の出現を表示:freq_vectコマンド
#出現数を降順に並び替え:sort_by_countオプション
freq_vect(data_vector = TestData[, 2], sort_by_count = TRUE, total_row = TRUE)
# A tibble: 6 x 4
data Count Percentage  Cum.
<chr> <chr>      <chr> <chr>
1     B     6         40    40
2     C     4       26.7  66.7
3     A     2       13.3    80
4     E     2       13.3  93.3
5     D     1        6.7   100
6 Total    15        100   100
n <- 15
TestData <- data.frame(Group = sample(paste0("Group", 1:5), n, replace = TRUE),
Data1 = sample(LETTERS[1:5], n, replace = TRUE),
Data2 = sample(LETTERS[1:26], n, replace = TRUE))
ResultData <- freq_two_vects(df = TestData, col1 = Data1, col2 = Data2,
separate_tables = FALSE)
#確認
ResultData
library("frequencies")
ResultData <- freq_two_vects(df = TestData, col1 = Data1, col2 = Data2,
separate_tables = FALSE)
View(ResultData)
#出現数が１以上を抽出
subset(ResultData, ResultData[, 3] > 0)
# A tibble: 14 x 4
library(swirl )
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
5
5 + 7
x <- 5 + 7
x
x -3
y <- x -3
y
c(1.1,9,3.14)
info()
z <- c(1.1,9,3.14)
?c
z
z
c(z,555,z)
z*2 + 100
z -1
sqrt(z -1 )
my_aqrt <- sqrt(z-1)
my_aqrt
info()
my_aqrt <- sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z
my_div <- z / my_sqrt
my_div
c(1,2,3,4)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
(z *2 +100)
(z *2 +100)
(z * 2 + 100)
inf()
info()
play()
nxt()
(z * 2 +
| 100)
(z * 2 +
100)
skip()
my_div
9
1
swirl()
sample()
sample
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:6,4)
sample(1:20,10)
install.packages(networkD3)
install.packages("networkD3")
###ROAuthパッケージを利用したTwitterOAuthオブジェクトの作成#####
#パッケージのインストール
#install.packages("ROAuth")
library("ROAuth")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
#API Keyの設定
APIKey <- "MIS0kzvxbes9UI059qH1jVZ0T"
#API Secretの設定
APISecret <- "nBnagrGGvJICbe48U8iBI3ecxIvWAgml1udk1KEmWFSwzpUycU"
#TwitterOAuthオブジェクトの作成
MyOauth <- OAuthFactory$new(consumerKey = APIKey, consumerSecret = APISecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
MyOauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
###ROAuthパッケージを利用したTwitterOAuthオブジェクトの作成#####
#パッケージのインストール
#install.packages("ROAuth")
library("ROAuth")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
#API Keyの設定
APIKey <- "MIS0kzvxbes9UI059qH1jVZ0T"
#API Secretの設定
APISecret <- "nBnagrGGvJICbe48U8iBI3ecxIvWAgml1udk1KEmWFSwzpUycU"
#TwitterOAuthオブジェクトの作成
MyOauth <- OAuthFactory$new(consumerKey = APIKey, consumerSecret = APISecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
MyOauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
###ROAuthパッケージを利用したTwitterOAuthオブジェクトの作成#####
#パッケージのインストール
#install.packages("ROAuth")
library("ROAuth")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
#API Keyの設定
APIKey <- "8jqEdnkO6I0SV6uiXcwO73GQT"
#API Secretの設定
APISecret <- "CarMcY5r0uBtaIGxY5g2HIMPpC68VKnggXb5OtgmAApxaSnNlY"
#TwitterOAuthオブジェクトの作成
MyOauth <- OAuthFactory$new(consumerKey = APIKey, consumerSecret = APISecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
MyOauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
###ROAuthパッケージを利用したTwitterOAuthオブジェクトの作成#####
#パッケージのインストール
#install.packages("ROAuth")
library("ROAuth")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
#API Keyの設定
APIKey <- "8jqEdnkO6I0SV6uiXcwO73GQT"
#API Secretの設定
APISecret <- "CarMcY5r0uBtaIGxY5g2HIMPpC68VKnggXb5OtgmAApxaSnNlY"
#TwitterOAuthオブジェクトの作成
MyOauth <- OAuthFactory$new(consumerKey = APIKey, consumerSecret = APISecret,
requestURL = requestURL, accessURL = accessURL, authURL = authURL)
MyOauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
wd1 <- "/home/aaaa/Documents/R_/"
wd2 <- paste0(wd1,"getTweet3_mediaMix")
loadKeywordDB1 <- "tw_keywords1_mediaMix.db"
writeTweetDB1 <- "tw_search_keyword_mediaMix.db"
setwd( wd2 )
#httrライブラリの読み込み
library(httr)
library(tidyverse)
library(RSQLite)
library(DBI)
library(rtweet)
library(stringr)
##キーワードを選ぶ作業
#リストが将来的に大量になる可能性が高いため
#Rのメモリー上に置かない
setwd( wd2 )
dbname <- loadKeywordDB1
driver=dbDriver("SQLite")
con1 =dbConnect(driver,dbname)
#NULL値のものを取得
#＜参考＞dbReadTable(con1, "search_keyword")
timestampNull_1 <- dbGetQuery(con1, "SELECT * FROM search_keyword WHERE time_stamp IS NULL")
#<参考>これなら動く aa <- dbGetQuery(con1, "SELECT * FROM search_keyword WHERE keyword = '逃げ恥'")
#NULL値のものに加え、time_stamp が古いものを優先
keywords1 <- dbGetQuery(con1,
"SELECT * FROM search_keyword WHERE time_stamp >0   order by time_stamp limit 300")
dbDisconnect(con1)
keywords2 <- rbind(timestampNull_1,keywords1)
#SQlite用のエスケープ
keywords2_escape <- keywords2
# for( i7 in  seq(keywords2$keyword)  ){
# 	keywords2_escape$keyword[i7] <- str_replace_all( keywords2_escape$keyword[i7],"'","''" )
# }
twGet1 <- function( keywords2=keywords2){
# キーワード を取得するループ
for( i8 in  1: length(keywords2$keyword)    ){
setwd(  paste0(wd2,"/OAuth_")  )
temp1 <- "TwitterOAuth2.Oauth"
load( temp1 )
# api 15 分間に 180 回まで
# 検索結果を取得するAPIに対する1時間あたりの回数制限。IPアドレス単位でカウントされるらしいです
tw1 <- search_tweets(q = URLencode(iconv( keywords2$keyword[i8] ,to = "UTF-8")),n = 10000, include_rts = TRUE)
#別ファイルで、
#これを使って、特定のユーザーのツイートを
#延々と拾っていくように改造する
#	tw1 <- get_timeline("Yuji_48", n = 100, max_id = NULL, home = FALSE, parse = TRUE,
#check = TRUE, usr = TRUE)
keywords2_escape_str <- str_replace_all( keywords2$keyword[i8],"'","''" )
str(tw1)
cat(  length(tw1$user_id[1])  )
if( is.na(tw1$user_id[1]) ==FALSE  ){
tw1$created_at <-  format( (tw1$created_at + 32400 ),
format="%Y-%m-%d %H:%M:%S")
i5=0
for ( i5 in seq( length(tw1$user_id ) )   ){
tw1$keyword <- keywords2$keyword[i8]
#半角スペース区切りで、先頭の単語（漫画名）が
#含まれているかチェック
str2<- str_split(keywords2$keyword[i8]," ")
#status_id かつ keyword が同じ場合は重複カット
#（別キーワードで、同一status_idのツイートを拾いたいため）
if( length(tw1$keyword)!= 0 ){
cat("tw1$keywordが0でないとき","\n")
str6 <- paste0(
'SELECT * FROM tw WHERE keyword=',
"'",
keywords2_escape_str,
"'",
' and status_id=',
tw1$status_id[i5]
)
setwd( wd2 )
dbname <- writeTweetDB1
driver=dbDriver("SQLite")
con2=dbConnect(driver,dbname)
distinctCheckStr <- dbGetQuery(con2,str6 )
dbDisconnect(con2)
cat("distinctCheckStr","\n")
str(distinctCheckStr)
flag_distinct_or_na <- 0
if( is.na(distinctCheckStr$user_id[1] ) == FALSE ){
flag_distinct_or_na <- 1
}
cat("flag_distinct_or_na→",flag_distinct_or_na,"\n")
cat("tw1$text[i5]→",tw1$text[i5],"\n")
tryCatch({
cat("ddddddd")
setwd( wd2 )
dbname <- writeTweetDB1
driver=dbDriver("SQLite")
con2=dbConnect(driver,dbname)
flag_match_str <- str_detect(tw1$text[i5] , pattern= str2[[1]][1]	 )
cat("flag_match_str→",flag_match_str,"\n")
if(flag_match_str == TRUE && flag_distinct_or_na == 0 ){
cat("aaaaaa")
rs=dbWriteTable(con2,"tw",tw1[i5,],
row.names=F,append = TRUE)
cat("bbbbbb")
dbDisconnect(con2)
}
},
error=function(e){
#cat("データ挿入時のエラー")
}
) # tryCatch   owari
}else{
cat("ツイート取得の長さが0","\n")
}
}# for i5 owari
}
keywords2_escape_str <- str_replace_all( keywords2$keyword[i8],"'","''" )
#文字列をtw api検索したあと、dbにタイムスタンプを残す
now_unixtime1 <- as.numeric( Sys.time() )
setwd( wd2 )
dbname <- loadKeywordDB1
driver=dbDriver("SQLite")
con1 =dbConnect(driver,dbname)
str1 <- paste0(
"UPDATE search_keyword SET time_stamp = '",
now_unixtime1,"'",
" WHERE  keyword = '",keywords2_escape_str,"'"
)
keywords1 <- dbGetQuery(con1,str1)
dbDisconnect(con1)
} # for i8 owari
} # twGet1 owari
aa <- twGet1( keywords2 )
